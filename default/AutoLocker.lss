
AutoLocker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000204  00800100  00800100  00000370  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012d  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000038f  00000000  00000000  000004bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001db  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033d  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ac  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000174  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	62 c0       	rjmp	.+196    	; 0xea <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	91 c0       	rjmp	.+290    	; 0x14c <__vector_20>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	13 e0       	ldi	r17, 0x03	; 3
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a4 30       	cpi	r26, 0x04	; 4
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	d9 d0       	rcall	.+434    	; 0x204 <main>
  52:	52 c1       	rjmp	.+676    	; 0x2f8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <sio_init>:
#ifndef __USART__H__
#define __USART__H__

/* sio設定 */
void sio_init(unsigned int baud,int bit)
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	9c 01       	movw	r18, r24
  5c:	eb 01       	movw	r28, r22
    unsigned int ubrr = (((F_CPU>>4)+(baud>>1))/baud-1);
  5e:	bc 01       	movw	r22, r24
  60:	76 95       	lsr	r23
  62:	67 95       	ror	r22
  64:	80 e0       	ldi	r24, 0x00	; 0
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	6c 5d       	subi	r22, 0xDC	; 220
  6a:	7b 40       	sbci	r23, 0x0B	; 11
  6c:	8f 4f       	sbci	r24, 0xFF	; 255
  6e:	9f 4f       	sbci	r25, 0xFF	; 255
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	1f d1       	rcall	.+574    	; 0x2b4 <__udivmodsi4>
  76:	21 50       	subi	r18, 0x01	; 1
  78:	30 40       	sbci	r19, 0x00	; 0
    // UBRRを設定するときに丸め処理をしておく。

    UBRR0H = (unsigned char)(ubrr>>8);    // ボーレート上位8bit
  7a:	30 93 c5 00 	sts	0x00C5, r19
    UBRR0L = (unsigned char)ubrr;        // ボーレート下位8bit
  7e:	20 93 c4 00 	sts	0x00C4, r18
    UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
  82:	88 ed       	ldi	r24, 0xD8	; 216
  84:	80 93 c1 00 	sts	0x00C1, r24

    // 送受信許可,送受信割り込み許可
    switch(bit)
  88:	c5 30       	cpi	r28, 0x05	; 5
  8a:	d1 05       	cpc	r29, r1
  8c:	31 f0       	breq	.+12     	; 0x9a <sio_init+0x44>
  8e:	28 97       	sbiw	r28, 0x08	; 8
  90:	31 f4       	brne	.+12     	; 0x9e <sio_init+0x48>
    {
        case 8:
            UCSR0C = (3<<UCSZ00) ;        // stopbit 1bit , 8bit送信
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24
  98:	02 c0       	rjmp	.+4      	; 0x9e <sio_init+0x48>
            break;
        case 5:
            UCSR0C = 0;                 // stopbit 1bit , 5bit送信
  9a:	10 92 c2 00 	sts	0x00C2, r1
    }
}
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <is_received>:


// データを受信しているかのチェック。受信しているなら非0。
int is_received()
{
    return  (usart_recv_write !=  usart_recv_read) ? 1 : 0;
  a4:	90 91 01 01 	lds	r25, 0x0101
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	80 91 02 02 	lds	r24, 0x0202
  b0:	98 17       	cp	r25, r24
  b2:	11 f0       	breq	.+4      	; 0xb8 <is_received+0x14>
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
    // read位置とwrite位置が異なるならば受信データがあるはず
}
  b8:	c9 01       	movw	r24, r18
  ba:	08 95       	ret

000000bc <wait_for_receiving>:


// データを受信しているかのチェック。受信しているなら非0。
int is_received()
{
    return  (usart_recv_write !=  usart_recv_read) ? 1 : 0;
  bc:	90 91 02 02 	lds	r25, 0x0202
  c0:	80 91 01 01 	lds	r24, 0x0101
}

// データを受信するまで待機する
void wait_for_receiving()
{
    while(!is_received())
  c4:	89 17       	cp	r24, r25
  c6:	e1 f3       	breq	.-8      	; 0xc0 <wait_for_receiving+0x4>
        ;
}
  c8:	08 95       	ret

000000ca <getReceivedData>:


// データを受信しているかのチェック。受信しているなら非0。
int is_received()
{
    return  (usart_recv_write !=  usart_recv_read) ? 1 : 0;
  ca:	90 91 02 02 	lds	r25, 0x0202
  ce:	80 91 01 01 	lds	r24, 0x0101
}

// データを受信するまで待機する
void wait_for_receiving()
{
    while(!is_received())
  d2:	89 17       	cp	r24, r25
  d4:	e1 f3       	breq	.-8      	; 0xce <getReceivedData+0x4>

// 受信したデータを返す。受信したデータがない場合は受信するまで待機。
int getReceivedData()
{
    wait_for_receiving();
    return usart_recvData[usart_recv_read++];
  d6:	e9 2f       	mov	r30, r25
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ec 5f       	subi	r30, 0xFC	; 252
  dc:	fd 4f       	sbci	r31, 0xFD	; 253
  de:	80 81       	ld	r24, Z
  e0:	9f 5f       	subi	r25, 0xFF	; 255
  e2:	90 93 02 02 	sts	0x0202, r25
}
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret

000000ea <__vector_18>:

// 割り込みによる受信
ISR(USART_RX_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
    usart_recvData[usart_recv_write++] = UDR0;    // 受信データを受信バッファに格納
  fc:	80 91 01 01 	lds	r24, 0x0101
 100:	90 91 c6 00 	lds	r25, 0x00C6
 104:	e4 e0       	ldi	r30, 0x04	; 4
 106:	f2 e0       	ldi	r31, 0x02	; 2
 108:	e8 0f       	add	r30, r24
 10a:	f1 1d       	adc	r31, r1
 10c:	90 83       	st	Z, r25
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 01 01 	sts	0x0101, r24
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <private_send_char>:

// 送信バッファにデータがあれば、そこから1バイト送信するルーチン。
// 内部的に使用しているだけなのでユーザーは呼び出さないで。
void private_send_char()
{
    if (usart_send_write != usart_send_read)
 126:	90 91 03 02 	lds	r25, 0x0203
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	89 17       	cp	r24, r25
 130:	61 f0       	breq	.+24     	; 0x14a <private_send_char+0x24>
        UDR0 = usart_sendData[usart_send_read++];// 送信バッファのデータを送信
 132:	80 91 03 02 	lds	r24, 0x0203
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 5f       	subi	r30, 0xFE	; 254
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	90 81       	ld	r25, Z
 140:	90 93 c6 00 	sts	0x00C6, r25
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 03 02 	sts	0x0203, r24
 14a:	08 95       	ret

0000014c <__vector_20>:
}

// 割り込みによる送信
ISR(USART_TX_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31

// 送信バッファにデータがあれば、そこから1バイト送信するルーチン。
// 内部的に使用しているだけなのでユーザーは呼び出さないで。
void private_send_char()
{
    if (usart_send_write != usart_send_read)
 15e:	90 91 03 02 	lds	r25, 0x0203
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	89 17       	cp	r24, r25
 168:	61 f0       	breq	.+24     	; 0x182 <__vector_20+0x36>
        UDR0 = usart_sendData[usart_send_read++];// 送信バッファのデータを送信
 16a:	80 91 03 02 	lds	r24, 0x0203
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	ee 5f       	subi	r30, 0xFE	; 254
 174:	fe 4f       	sbci	r31, 0xFE	; 254
 176:	90 81       	ld	r25, Z
 178:	90 93 c6 00 	sts	0x00C6, r25
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 03 02 	sts	0x0203, r24

// 割り込みによる送信
ISR(USART_TX_vect)
{
    private_send_char();
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <sendChar>:

// 1バイト送信
void sendChar(int c)
{
 194:	58 2f       	mov	r21, r24
    // 送信バッファがいっぱいなら待つ
    while(((usart_send_write + 1) & 0xff) == usart_send_read)
 196:	40 91 00 01 	lds	r20, 0x0100
 19a:	e4 2f       	mov	r30, r20
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	31 96       	adiw	r30, 0x01	; 1
 1a0:	9f 01       	movw	r18, r30
 1a2:	30 70       	andi	r19, 0x00	; 0
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	80 91 03 02 	lds	r24, 0x0203
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	28 17       	cp	r18, r24
 1ae:	39 07       	cpc	r19, r25
 1b0:	d1 f3       	breq	.-12     	; 0x1a6 <sendChar+0x12>
        ;

    // 何はともあれ送信バッファにデータを積む。
    usart_sendData[usart_send_write++] = c;
 1b2:	ee 5f       	subi	r30, 0xFE	; 254
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	50 83       	st	Z, r21
 1b8:	94 2f       	mov	r25, r20
 1ba:	9f 5f       	subi	r25, 0xFF	; 255
 1bc:	90 93 00 01 	sts	0x0100, r25

    // 送信レジスタがセットされている == 送信できる状態　ならば、
    // 一度だけ送信しておく。
    if (UCSR0A & (1<<UDRE0))
 1c0:	80 91 c0 00 	lds	r24, 0x00C0
 1c4:	85 ff       	sbrs	r24, 5
 1c6:	10 c0       	rjmp	.+32     	; 0x1e8 <sendChar+0x54>

// 送信バッファにデータがあれば、そこから1バイト送信するルーチン。
// 内部的に使用しているだけなのでユーザーは呼び出さないで。
void private_send_char()
{
    if (usart_send_write != usart_send_read)
 1c8:	80 91 03 02 	lds	r24, 0x0203
 1cc:	98 17       	cp	r25, r24
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <sendChar+0x54>
        UDR0 = usart_sendData[usart_send_read++];// 送信バッファのデータを送信
 1d0:	80 91 03 02 	lds	r24, 0x0203
 1d4:	e8 2f       	mov	r30, r24
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ee 5f       	subi	r30, 0xFE	; 254
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	90 81       	ld	r25, Z
 1de:	90 93 c6 00 	sts	0x00C6, r25
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 03 02 	sts	0x0203, r24
 1e8:	08 95       	ret

000001ea <sendString>:
    // その送信が完了するまでここで積んだデータが送信されないからである。
}

// 文字列の送信
void sendString(char *p)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <sendString+0xe>
    while(*p)
        sendChar(*p++);
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ce df       	rcall	.-100    	; 0x194 <sendChar>
}

// 文字列の送信
void sendString(char *p)
{
    while(*p)
 1f8:	88 81       	ld	r24, Y
 1fa:	88 23       	and	r24, r24
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <sendString+0x8>
        sendChar(*p++);
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <main>:
#include <util/delay.h>
#include <stdbool.h>
#include "usart.h"

int main(void)
{
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	uint16_t wData = 0;
	uint16_t cnt = 0;
	
	DDRC = 0b00000000;
 216:	17 b8       	out	0x07, r1	; 7
	PORTC = 0b11111110;
 218:	8e ef       	ldi	r24, 0xFE	; 254
 21a:	88 b9       	out	0x08, r24	; 8
	DDRD = 0b11000000;
 21c:	80 ec       	ldi	r24, 0xC0	; 192
 21e:	8a b9       	out	0x0a, r24	; 10

	// シリアル通信の初期化
    sio_init(9600, 8);    // SIO設定
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	95 e2       	ldi	r25, 0x25	; 37
 224:	68 e0       	ldi	r22, 0x08	; 8
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	16 df       	rcall	.-468    	; 0x56 <sio_init>
    sei(); // 全割り込み許可
 22a:	78 94       	sei
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0

	while(1){
		wData = 0;
		for(uint8_t i = 0; i < 16; i++){
			ADCSRA = _BV(ADEN) | _BV(ADIF) | 0b011;
			ADMUX = _BV(REFS0) | 0;
 230:	e0 e4       	ldi	r30, 0x40	; 64
 232:	be 2e       	mov	r11, r30
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 234:	0a ef       	ldi	r16, 0xFA	; 250
 236:	10 e0       	ldi	r17, 0x00	; 0
    sei(); // 全割り込み許可

	while(1){
		wData = 0;
		for(uint8_t i = 0; i < 16; i++){
			ADCSRA = _BV(ADEN) | _BV(ADIF) | 0b011;
 238:	73 e9       	ldi	r23, 0x93	; 147
 23a:	c7 2e       	mov	r12, r23
			ADMUX = _BV(REFS0) | 0;
 23c:	60 e4       	ldi	r22, 0x40	; 64
 23e:	d6 2e       	mov	r13, r22
			ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIF) | 0b011;
 240:	33 ed       	ldi	r19, 0xD3	; 211
 242:	e3 2e       	mov	r14, r19
		}
		wData = (wData + 8) >> 4;

		if(wData <= 75){
			//人がいない
			PORTD = 0b10000000; //PD7出力
 244:	20 e8       	ldi	r18, 0x80	; 128
 246:	f2 2e       	mov	r15, r18
 248:	c4 e2       	ldi	r28, 0x24	; 36
 24a:	d4 ef       	ldi	r29, 0xF4	; 244
	PORTC = 0b11111110;
	DDRD = 0b11000000;

	// シリアル通信の初期化
    sio_init(9600, 8);    // SIO設定
    sei(); // 全割り込み許可
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0

	while(1){
		wData = 0;
		for(uint8_t i = 0; i < 16; i++){
			ADCSRA = _BV(ADEN) | _BV(ADIF) | 0b011;
 252:	c0 92 7a 00 	sts	0x007A, r12
			ADMUX = _BV(REFS0) | 0;
 256:	d0 92 7c 00 	sts	0x007C, r13
			ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIF) | 0b011;
 25a:	e0 92 7a 00 	sts	0x007A, r14
			loop_until_bit_is_set(ADCSRA, ADIF);
 25e:	80 91 7a 00 	lds	r24, 0x007A
 262:	84 ff       	sbrs	r24, 4
 264:	fc cf       	rjmp	.-8      	; 0x25e <main+0x5a>
			wData += ADCW;
 266:	80 91 78 00 	lds	r24, 0x0078
 26a:	90 91 79 00 	lds	r25, 0x0079
 26e:	28 0f       	add	r18, r24
 270:	39 1f       	adc	r19, r25
 272:	c8 01       	movw	r24, r16
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x70>
    sio_init(9600, 8);    // SIO設定
    sei(); // 全割り込み許可

	while(1){
		wData = 0;
		for(uint8_t i = 0; i < 16; i++){
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	60 31       	cpi	r22, 0x10	; 16
 27c:	51 f7       	brne	.-44     	; 0x252 <main+0x4e>
			ADCSRA = _BV(ADEN) | _BV(ADSC) | _BV(ADIF) | 0b011;
			loop_until_bit_is_set(ADCSRA, ADIF);
			wData += ADCW;
			_delay_ms(1);
		}
		wData = (wData + 8) >> 4;
 27e:	28 5f       	subi	r18, 0xF8	; 248
 280:	3f 4f       	sbci	r19, 0xFF	; 255

		if(wData <= 75){
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	36 95       	lsr	r19
 286:	27 95       	ror	r18
 288:	9a 95       	dec	r25
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x80>
 28c:	2c 34       	cpi	r18, 0x4C	; 76
 28e:	31 05       	cpc	r19, r1
 290:	50 f4       	brcc	.+20     	; 0x2a6 <main+0xa2>
			//人がいない
			PORTD = 0b10000000; //PD7出力
 292:	fb b8       	out	0x0b, r15	; 11
			cnt++;
 294:	4f 5f       	subi	r20, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255

			if(cnt >= 40){
 298:	48 32       	cpi	r20, 0x28	; 40
 29a:	51 05       	cpc	r21, r1
 29c:	38 f0       	brcs	.+14     	; 0x2ac <main+0xa8>
				//0x1 を送信
				sendChar(0x1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	78 df       	rcall	.-272    	; 0x194 <sendChar>
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <main+0xa4>
				cnt = 0;
			}
		}
		else{
			//人がいる
			PORTD = 0b01000000; //PD6出力
 2a6:	bb b8       	out	0x0b, r11	; 11
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0xaa>
 2b2:	cc cf       	rjmp	.-104    	; 0x24c <main+0x48>

000002b4 <__udivmodsi4>:
 2b4:	a1 e2       	ldi	r26, 0x21	; 33
 2b6:	1a 2e       	mov	r1, r26
 2b8:	aa 1b       	sub	r26, r26
 2ba:	bb 1b       	sub	r27, r27
 2bc:	fd 01       	movw	r30, r26
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__udivmodsi4_ep>

000002c0 <__udivmodsi4_loop>:
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	ee 1f       	adc	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	a2 17       	cp	r26, r18
 2ca:	b3 07       	cpc	r27, r19
 2cc:	e4 07       	cpc	r30, r20
 2ce:	f5 07       	cpc	r31, r21
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__udivmodsi4_ep>
 2d2:	a2 1b       	sub	r26, r18
 2d4:	b3 0b       	sbc	r27, r19
 2d6:	e4 0b       	sbc	r30, r20
 2d8:	f5 0b       	sbc	r31, r21

000002da <__udivmodsi4_ep>:
 2da:	66 1f       	adc	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	1a 94       	dec	r1
 2e4:	69 f7       	brne	.-38     	; 0x2c0 <__udivmodsi4_loop>
 2e6:	60 95       	com	r22
 2e8:	70 95       	com	r23
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	9b 01       	movw	r18, r22
 2f0:	ac 01       	movw	r20, r24
 2f2:	bd 01       	movw	r22, r26
 2f4:	cf 01       	movw	r24, r30
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
